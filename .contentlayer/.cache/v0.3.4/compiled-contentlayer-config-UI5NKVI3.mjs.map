{
  "version": 3,
  "sources": ["../../../contentlayer.config.js", "../../../lib/rehype-pre-raw.js"],
  "sourcesContent": ["import {\r\n  defineDocumentType,\r\n  defineNestedType,\r\n  makeSource,\r\n} from \"contentlayer/source-files\";\r\nimport readingTime from \"reading-time\";\r\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\r\nimport rehypePrettyCode from \"rehype-pretty-code\";\r\nimport rehypeSlug from \"rehype-slug\";\r\nimport remarkGfm from \"remark-gfm\";\r\nimport GithubSlugger from \"github-slugger\";\r\nimport { postProcessRehype, preProcessRehype } from \"./lib/rehype-pre-raw\";\r\n\r\nconst ProjectLink = defineNestedType(() => ({\r\n  name: \"Link\",\r\n  fields: {\r\n    live: { type: \"string\" },\r\n    github: { type: \"string\" },\r\n    playstore: { type: \"string\" },\r\n    appstore: { type: \"string\" },\r\n  },\r\n}));\r\n\r\nconst Project = defineDocumentType(() => ({\r\n  name: \"Project\",\r\n  filePathPattern: \"**/projects/**/*.mdx\",\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    image: {\r\n      type: \"image\",\r\n      required: true,\r\n    },\r\n    links: {\r\n      type: \"list\",\r\n      of: ProjectLink,\r\n    },\r\n    category: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    tags: {\r\n      type: \"list\",\r\n      of: { type: \"string\" },\r\n    },\r\n    developers: {\r\n      type: \"list\",\r\n      of: { type: \"string\" },\r\n    },\r\n    startDate: {\r\n      type: \"date\",\r\n      required: true,\r\n    },\r\n    endDate: {\r\n      type: \"date\",\r\n    },\r\n    currentlyWorking: {\r\n      type: \"boolean\",\r\n      default: false,\r\n    },\r\n    updatedAt: {\r\n      type: \"date\",\r\n      required: true,\r\n    },\r\n  },\r\n  computedFields: {\r\n    url: {\r\n      type: \"string\",\r\n      resolve: (doc) => doc._raw.flattenedPath,\r\n    },\r\n  },\r\n}));\r\n\r\nconst Blog = defineDocumentType(() => ({\r\n  name: \"Blog\",\r\n  filePathPattern: \"**/blogs/**/*.mdx\",\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    image: {\r\n      type: \"image\",\r\n      required: true,\r\n    },\r\n    isPublished: {\r\n      type: \"boolean\",\r\n      default: true,\r\n    },\r\n    author: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    tags: {\r\n      type: \"list\",\r\n      of: { type: \"string\" },\r\n    },\r\n    publishedAt: {\r\n      type: \"date\",\r\n      required: true,\r\n    },\r\n    updatedAt: {\r\n      type: \"date\",\r\n      required: true,\r\n    },\r\n  },\r\n  computedFields: {\r\n    url: {\r\n      type: \"string\",\r\n      resolve: (doc) => doc._raw.flattenedPath,\r\n    },\r\n    readingTime: {\r\n      type: \"json\",\r\n      resolve: (doc) => readingTime(doc.body.raw),\r\n    },\r\n    toc: {\r\n      type: \"json\",\r\n      resolve: async (doc) => {\r\n        const regexp = /\\n(?<flag>#{1,6})\\s+(?<content>.+)/g;\r\n        const slugger = new GithubSlugger();\r\n        const headings = Array.from(doc.body.raw.matchAll(regexp)).map(\r\n          ({ groups }) => {\r\n            const flag = groups?.flag;\r\n            const content = groups?.content;\r\n\r\n            return {\r\n              level:\r\n                flag?.length === 1\r\n                  ? \"one\"\r\n                  : flag?.length === 2\r\n                  ? \"two\"\r\n                  : \"three\",\r\n              text: content,\r\n              slug: content ? slugger.slug(content) : undefined,\r\n            };\r\n          }\r\n        );\r\n\r\n        return headings;\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst codeOptions = {\r\n  theme: \"github-dark\",\r\n  onVisitLine(node) {\r\n    if (node.children.length === 0) {\r\n      node.children = [{ type: \"text\", value: \" \" }];\r\n    }\r\n  },\r\n};\r\n\r\nexport default makeSource({\r\n  contentDirPath: \"./content/\",\r\n  // contentDirInclude: [\"blogs\", \"projects\"],\r\n  documentTypes: [Project, Blog],\r\n  disableImportAliasWarning: true,\r\n  mdx: {\r\n    remarkPlugins: [remarkGfm],\r\n    rehypePlugins: [\r\n      preProcessRehype,\r\n      rehypeSlug,\r\n      [rehypeAutolinkHeadings, { behavior: \"append\" }],\r\n      [rehypePrettyCode, codeOptions],\r\n      postProcessRehype,\r\n    ],\r\n  },\r\n});\r\n", "import { visit } from \"unist-util-visit\";\r\n\r\nexport const preProcessRehype = () => (tree) => {\r\n  // visit(tree, (node) => {\r\n  //   if (node?.type === \"element\" && node?.tagName === \"pre\") {\r\n  //     const [codeEl] = node.children;\r\n\r\n  //     if (codeEl.tagName !== \"code\") return;\r\n\r\n  //     node.raw = codeEl.children?.[0].value;\r\n  //   }\r\n  // });\r\n  visit(tree, (node) => {\r\n    if (node?.type === \"element\" && node?.tagName === \"pre\") {\r\n      const [codeEl] = node.children;\r\n\r\n      if (codeEl.tagName !== \"code\") return;\r\n\r\n      node.__rawString__ = codeEl.children?.[0].value;\r\n    }\r\n  });\r\n};\r\n\r\nexport const postProcessRehype = () => (tree) => {\r\n  visit(tree, (node) => {\r\n    if (node?.type === \"element\" && node?.tagName === \"figure\") {\r\n      if (!(\"data-rehype-pretty-code-figure\" in node.properties)) {\r\n        return;\r\n      }\r\n\r\n      const preElement = node.children.at(-1);\r\n      if (preElement.tagName !== \"pre\") {\r\n        return;\r\n      }\r\n\r\n      preElement.properties[\"__rawString__\"] = node.__rawString__;\r\n    }\r\n  });\r\n  // visit(tree, \"element\", (node) => {\r\n  //   if (node?.type === \"element\" && node?.tagName === \"pre\") {\r\n  //     node.properties[\"raw\"] = node.raw;\r\n  //     // console.log(node) here to see if you're getting the raw text\r\n  //   }\r\n  // });\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
